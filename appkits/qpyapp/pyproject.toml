[project]
name = "qpyapp"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"

requires-python = ">=3.10"
dependencies = [
    "gradio>=5.9.1",
    "gradio-webrtc",
    "numpy",
    "websockets",
    "twilio",
    "Pillow",
    "opencv-python",
    "librosa",
    "pydub",
    "gradio_webrtc[vad]",
    "numba==0.60.0",
    "python-dotenv",
    "modelscope-studio",
    "anthropic>=0.42.0",
    "google-generativeai>=0.8.3",
    "openai>=1.58.1",
    "lumaai>=1.2.2",
    "cohere>=5.13.4",
    "crewai>=0.86.0",
    "langchain>=0.3.13",
    "langchain-openai>=0.2.14",
    "crewai-tools>=0.17.0",
    "hyperbolic>=2.0.0",
    "jupyter-notebook-parser>=0.1.4",
    "manimgl>=1.7.2",
    "box>=0.1.5",
    "pytest>=8.3.4",
    "lxml>=5.3.0",
    "jupyterhub>=5.2.1",
    "jupyterlab>=4.3.4",
    "notebook>=7.3.2",
    "streamlit>=1.41.1",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "black",
    "isort",
    "flake8"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project.scripts]
qpyapp = "qpyapp:main"
cleanup = "qpyci.commands:clean"
cov = "ci:coverage"
badge = "qpyci.commands:generate_badge"
check_format = "ci:check_format"
ci = "ci:ci"

[tool.hatch.build.targets.wheel.force-include]
"ci.py" = "ci.py"

[tool.uv]
default-groups = ["dev"]

[tool.uv.sources]
qpyci = { git = "https://github.com/fluent-qa/qpyci.git", rev = "main" }

[tool.hatch.build.targets.wheel]
packages = ["src/qpyapp"]

[tool.pyright]
typeCheckingMode = "strict"
reportUnnecessaryTypeIgnoreComment = true
reportMissingTypeStubs = false
include = ["src", "tests"]
venvPath = ".venv"
# see https://github.com/microsoft/pyright/issues/7771 - we don't want to error on decorated functions in tests
# which are not otherwise used
executionEnvironments = [{ root = "tests", reportUnusedFunction = false }]


[dependency-groups]
lint = ["ruff>=0.8.3"]
dev = [
    "allure-pytest>=2.13.5",
    "pytest-cov>=6.0.0",
    "pytest>=8.3.4",
    "coverage-badge>=1.1.2",
]

[tool.ruff]
line-length = 120
target-version = "py39"
include = ["src/**/*.py", "tests/**/*.py", "docs/**/*.py"]

[tool.ruff.lint]
extend-select = ["Q", "RUF100", "C90", "UP", "I", "D"]
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
isort = { combine-as-imports = true, known-first-party = ["src"] }
mccabe = { max-complexity = 15 }
ignore = [
    "D100", # ignore missing docstring in module
    "D102", # ignore missing docstring in public method
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D107", # ignore missing docstring in __init__ methods
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# don't format python in docstrings, pytest-examples takes care of it
docstring-code-format = false
quote-style = "single"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D"]
"docs/**/*.py" = ["D"]
"src/**/*.py" = ["D101", "D103"]


[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "--alluredir",
    "allure-results",
    "--clean-alluredir",
    "-l",
    "-s",
    "--durations",
    "0",
    "--cov",
    "qpycases"
]
log_cli = true
log_cli_level = "info"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_format = "%(asctime)s %(levelname)s %(message)s"
minversion = "6.0"
